version: '3.8' # Use a recent version

services:
  # PHP Service (Your Laravel App)
  app:
    build:
      context: . # Use current directory as build context
      dockerfile: docker/php/Dockerfile # Path to the PHP Dockerfile
    container_name: laravel_app # Optional: Custom container name
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      # Mount your project directory into the container
      - ./:/var/www/html
      # You might need to map storage/logs if permissions are an issue initially
      # - ./storage:/var/www/html/storage
    depends_on:
      - db # Wait for the database to be ready (basic check)
    networks:
      - laravel_network

  # Nginx Service
  nginx:
    image: nginx:alpine # Use a lightweight Nginx image
    container_name: laravel_nginx
    restart: unless-stopped
    ports:
      # Map port 8080 on your host to port 80 in the container
      # Change 8080 if it conflicts with another service on your host
      - "7070:80"
    volumes:
      # Mount the project directory (read-only is often sufficient for Nginx)
      - ./:/var/www/html:ro
      # Mount the Nginx configuration file
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app # Nginx needs the PHP-FPM service
    networks:
      - laravel_network

  # MariaDB Service
  db:
    image: mariadb:10.11 # Use an official MariaDB image (choose version)
    container_name: laravel_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE} # Use variables from your .env file
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-secret} # Provide a default if not in .env
    volumes:
      # Persist database data using a named volume
      - db_data:/var/lib/mysql
    networks:
      - laravel_network

# Define Networks
networks:
  laravel_network:
    driver: bridge # Default network driver

# Define Named Volumes
volumes:
  db_data: # Persists MariaDB data
